{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAIjD,MAAM,eAAe,GAAG,cAAc,CAAgB,eAAe,CAAE,CAAC;AAMxE,MAAM,cAAc;IAElB,iCAAiC;IACjC,KAAK,CAAC,oBAAoB,CAAC,UAAe;QACxC,OAAO,MAAM,eAAe,CAAC,oBAAoB,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,CAAC;IAClF,CAAC;IAED,2CAA2C;IAC3C,KAAK,CAAC,mBAAmB;QACvB,MAAM,EAAC,WAAW,EAAC,GAAG,MAAM,eAAe,CAAC,mBAAmB,EAAE,CAAC;QAClE,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,kCAAkC;IAClC,KAAK,CAAC,mBAAmB,CAAC,UAAmB;QAC3C,MAAM,eAAe,CAAC,mBAAmB,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;IACxE,CAAC;IAED,8CAA8C;IAC9C,KAAK,CAAC,qBAAqB,CAAC,aAAsB;QAChD,MAAM,eAAe,CAAC,qBAAqB,CAAC,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC,CAAC;IAChF,CAAC;IAED,sCAAsC;IACtC,KAAK,CAAC,YAAY,CAAC,QAAiB;QAClC,MAAM,eAAe,CAAC,YAAY,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,yBAAyB;IACzB,KAAK,CAAC,YAAY,CAAC,KAAa;QAC9B,MAAM,eAAe,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;IACtD,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,mBAAmB,CAAC,cAAqC;QAC7D,eAAe,CAAC,kBAAkB,EAAE,CAAC;QACrC,eAAe,CAAC,WAAW,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;QAClE,MAAM,eAAe,CAAC,mBAAmB,EAAE,CAAC;IAC9C,CAAC;IAED,wBAAwB;IACxB,KAAK,CAAC,aAAa,CAAC,OAAY;QAC9B,MAAM,eAAe,CAAC,aAAa,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED,aAAa;QACX,eAAe,CAAC,kBAAkB,EAAE,CAAC;IACvC,CAAC;CACF;AAED,cAAc,eAAe,CAAC;AAC9B,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,CAAC","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type { OtplessPlugin } from './definitions';\n\nconst OtplessInstance = registerPlugin<OtplessPlugin>('OtplessPlugin',);\n\ninterface OtplessResultCallback {\n  (result: any): void;\n}\n\nclass OtplessManager {\n\n  // to open the otpless login page\n  async showOtplessLoginPage(jsonParams: any) {\n    return await OtplessInstance.showOtplessLoginPage({ \"jsonParams\": jsonParams });\n  }\n\n  // to check if whatsapp is installed or not\n  async isWhatsappInstalled() {\n    const {hasWhatsapp} = await OtplessInstance.isWhatsappInstalled();\n    return hasWhatsapp;\n  }\n\n  // set visibility of native loader\n  async setLoaderVisibility(visibility: boolean) {\n    await OtplessInstance.setLoaderVisibility({ visibility: visibility });\n  }\n\n  // to enable and disble the webview inspection\n  async setWebViewInspectable(isInspectable: boolean) {\n    await OtplessInstance.setWebViewInspectable({ isInspectable: isInspectable });\n  }\n\n  // to enable and disable onetap option\n  async enableOneTap(isOnetap: boolean) {\n    await OtplessInstance.enableOneTap({ isOnetap: isOnetap });\n  }\n\n  // to initialize headless\n  async initHeadless(appId: String) {\n    await OtplessInstance.initHeadless({ appId: appId })\n  }\n\n  // to set headless callback\n  async setHeadlessCallback(resultCallback: OtplessResultCallback) {\n    OtplessInstance.removeAllListeners();\n    OtplessInstance.addListener('OtplessResultEvent', resultCallback);\n    await OtplessInstance.setHeadlessCallback();\n  }\n\n  // to start headless sdk\n  async startHeadless(request: any) {\n    await OtplessInstance.startHeadless({ request: request });\n  }\n\n  clearListener() {\n    OtplessInstance.removeAllListeners();\n  }\n}\n\nexport * from './definitions';\nexport { OtplessManager, OtplessInstance };\n"]}